These are the install directions to get your system set up for supporting Amazon based deploys.

First make sure you have the latest version of chef.  NOTE: in the following instructions I show gem install ... you may
need to use sudo gem install ... instead if your system is set up to install gems in a system directory which is the default
if you are using the standard mac ruby configuration.

gem install chef

# Install the zzdeploy gem which gives you your zz commands
gem install zzdeploy

# install your amazon api keys with
zz config_amazon --akey AKIAJZR7WODGPXONMRVA --skey lUEwegAXc0NSSrB16klFtBWKDuFO/LLZfyZi82DR

# In order to gain access to the Amazon deployed machines via ssh you need to set up various private keys
# I am not showing the keys here but you can get them from the keychain 'ZZ Admin Accounts'.  Scroll
# about half way down until you see the text: Deploy group private keys.  Below this you will see
#amazon_staging:

Copy everything from the #amazon_staging: to the end of the file onto your clipboard.  Open up a terminal session
and paste the text you copied.  This should create all the private key files in the proper locations on your system.

At this point you should be all set up.  You can do a quick verification by running:

zz ssh -g photos_staging

If all is working you should get a list of servers, pick one and you should be logged into that machine via ssh.



####
####
####
# CHECKLIST FOR PRODUCTION DEPLOY
####
####
####

Pre-deploy steps

- Set up vhost to be hacktest.photos.zangzing.com initially to test with production data
- Set email host to be hacktest.zangzing.com
- Point database at production photos db: zz-prod-rds.ckikxby0s3p8.us-east-1.rds.amazonaws.com
- Create a production load balancer (photos-production-balancer)
- map hacktest.photos.zangzing.com to production load balancer (will change on deploy day)
-
- Create production deploy group (in us-east-1c except db_slave)
-- 1 App master
-- 2 App servers
-- 1 db master (redis master)
-- 1 db_slave  (redis slave) (create in zone us-east-1d, all others are in 1c)
-- 3 util (photo cpu workers)
-
- Install private key file to allow tunnel to EY
- Create live SSH tunnel on local port 9999 to Redis Server running at EY
- Change role of Amazon Redis master to be a slave of EY until synced
- Change role of redis back to master (for testing)
- Verify functionality for basic operations (minimize writing to production db)
-

Deploy steps
- EY machines
- On EY production environment, put up maint page:
-- ey web disable -e photos_production -a photos
- Let system bleed work until no further work in resque queues

- Amazon machines
- stop local redis db slave
-- sudo /sbin/service redis stop (on db_slave)
- convert redis master to slave of EY, verify in sync
-- redis-cli slaveof localhost 9999
- after in sync (do info on EY and AZ redis), restart redis master to switch back to local and start redis slave
-- sudo /sbin/service redis restart (on db master)
-- sudo /sbin/service redis start (on db_slave)
- remove hacktest.photos.zangzing.com from Route53 load balancer alias mapping
- delete old group with
-- zz deploy_group_delete -g photos_production
- assign new password to zzadmin account on production db of lwoksdp87iqz -- NOTE GET THE ACTUAL PW from KeyChain
-- log into production photo db in Sequel Pro and modify the password with User Accounts menu item
-- existing connections will continue to operate with old password until they need to reconnect
--
- change group configuration to use vhost of www.zangzing.com
- Set email host to be zangzing.com
- create the new group with changes
- NOTE NOTE NOTE change password to proper password in following command line (Amazon WS ZangZing Key And...)
-- zz deploy_group_create --group photos_production --app_name photos --rails_env photos_production --vhost www.zangzing.com --email_host zangzing.com --app_git_url git@github.com:zangzing/server.git --amazon_security_key amazon_production --amazon_security_group security_production --amazon_image baseline_production --amazon_elb photos-production-balancer --database_host zz-prod-rds.ckikxby0s3p8.us-east-1.rds.amazonaws.com --database_username zzadmin --database_password lwoksdp87iqz --database_schema photos_prod
-
- chef_upload and chef_bake to pick up new group vhost, email, db changes
-- zz chef_upload -g photos_production -t 2011-08-11-1  (verify the proper tag on deploy day)
-- zz chef_bake -g photos_production

- deploy 2011-08-17-feature to pick up changes
-- zz deploy -g photos_production -t 2011-08-17-feature
-
- turn on MAINT mode on Amazon machines
-- zz maint --maint -g photos_production
- hand verify nginx conf files to make sure host related changes look correct
- NOTE: this is an area we can't really test before hand since production nginx conf acts slightly differently
- from staging
-
-
- On Ylastic for Route53 DNS
- Remove A entries for photos.zangzing.com, www.zangzing.com, zangzing.com
- Create Alias entry for zanging.com. that points to photos-production-balancer
- Create CNAME entries for www.zangzing.com and photos.zangzing.com pointing to zangzing.com (initially use 60 sec TTL, change at later date to higher value)
-
- Amazon
- turn off maint mode
-- zz maint --no-maint -g photos_production
- server should be back up
- verify server is working and account data is intact
- congratulate ourselves for a job well done!

Post deploy (a couple of days later)
- Shut down all EY servers
- send EY a Dear John letter to terminate "support agreement"




