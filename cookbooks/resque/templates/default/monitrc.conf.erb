# monitor the resque workers
<% (@num_workers).times do |num| %>
<% pid_file = "/var/run/zz/resque/#{@app_name}_resque_#{num}.pid" %>
<% conf_file = "/data/#{@app_name}/shared/config/resque_#{num}.conf" %>
<% start_cmd = "/usr/bin/zzscripts/resque_start.rb #{@rails_env} #{@current_dir} #{pid_file} work 60 #{conf_file}" %>
<% stop_cmd = "/usr/bin/zzscripts/resque_stop.rb #{pid_file} 60" %>
check process resque_<%= @app_name %>_<%= num %>
  with pidfile <%=pid_file%>
  start program = "/bin/su - <%=@deploy_user%> -c '<%=start_cmd%>'"
  stop program = "/bin/su - <%=@deploy_user%> -c '<%=stop_cmd%>'"
  # kill softly if exceeds memory limit
  if totalmem > 200.0 MB for 8 cycles then exec "/bin/bash -c '/bin/kill `cat <%=pid_file%>` && sleep 1'"
  group resque_<%= @app_name %>
<% end %>
<%if @include_scheduler%>
<% pid_file = "/var/run/zz/resque/#{@app_name}_resque_scheduler.pid" %>
<% start_cmd = "/usr/bin/zzscripts/resque_start.rb #{@rails_env} #{@current_dir} #{pid_file} scheduler 60 dummy_conf" %>
<% stop_cmd = "/usr/bin/zzscripts/resque_stop.rb #{pid_file} 60" %>
check process resque_<%= @app_name %>_scheduler
  with pidfile <%=pid_file%>
  start program = "/bin/su - <%=@deploy_user%> -c '<%=start_cmd%>'"
  stop program = "/bin/su - <%=@deploy_user%> -c '<%=stop_cmd%>'"
  # kill softly if exceeds memory limit
  if totalmem > 120.0 MB for 6 cycles then exec "/bin/bash -c '/bin/kill `cat <%=pid_file%>` && sleep 1'"
  group resque_<%= @app_name %>
<%end%>
